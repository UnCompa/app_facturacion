type Negocio
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["superadmin"] }
      { allow: groups, groups: ["admin"], operations: [read, update] }
      { allow: groups, groups: ["vendedor"], operations: [read] }
    ]
  ) {
  id: ID!
  nombre: String!
  ruc: String!
  telefono: String
  duration: Int
  movilAccess: Int
  pcAccess: Int
  direccion: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Producto
  @model
  @auth(rules: [{ allow: groups, groups: ["admin", "vendedor"] }]) {
  id: ID!
  nombre: String!
  descripcion: String
  precio: Float!
  stock: Int!
  productoImages: [String] # Lista de claves de S3 para múltiples imágenes
  negocioID: ID! @index(name: "byNegocio", sortKeyFields: ["nombre"])
  categoria: Categoria @belongsTo(fields: ["categoriaID"]) # Relación inversa (N:1)
  categoriaID: ID! @index(name: "byCategoria")
  estado: String # Ejemplo: "activo", "inactivo"
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Categoria
  @model
  @auth(rules: [{ allow: groups, groups: ["admin", "vendedor"] }]) {
  id: ID!
  nombre: String!
  parentCategoriaID: ID @index(name: "byParentCategoria") # Para navegar hacia la categoría padre
  productos: [Producto] @hasMany(indexName: "byCategoria", fields: ["id"]) # Relación 1:N
  subCategorias: [Categoria]
    @hasMany(indexName: "byParentCategoria", fields: ["id"]) # Relación recursiva 1:N
}

type SesionDispositivo
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["superadmin"] }
      {
        allow: groups
        groups: ["admin"]
        operations: [read, update, create, delete]
      }
      {
        allow: groups
        groups: ["vendedor"]
        operations: [read, create, delete]
      }
    ]
  ) {
  id: ID!
  negocioId: ID! @index(name: "byNegocio")
  userId: String!
  deviceId: String!
  deviceType: String! # "PC" o "MOVIL"
  deviceInfo: String
  isActive: Boolean!
  lastActivity: AWSDateTime!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
